# -*- coding: utf-8 -*-
"""Simplifyed Dash app Global_mean_rising_sea_levels_1993_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JA_FgBOwGyh3nwHiMJrU_hz14rUPCn_3

Global mean sea level increased by 0.20 [0.15 to 0.25] m between 1901 and 2018. The average rate of sea level rise was 1.3 [0.6 to 2.1] mm yr-1 between 1901 and 1971, increasing to 1.9 [0.8 to 2.9] mm yr-1 between 1971 and 2006, and further increasing to 3.7 [3.2 to 4.2] mm yr-1 between 2006 and 2018 (high confidence). Human influence was very likely the main driver of these increases since at least 1971. Source: IPPC (Intergovernmental Panel on Climate Change), the United Nations body for assessing the science related to climate change, 2023 report https://www.ipcc.ch/report/ar6/syr/

Local UK data on rising sea levels is not usable due to due to the sites
not producing climate quality data for sustained periods throughout the year. A UK national report in 2019 for the biannual Global Sea Level Observing System (GLOSS) meeting provides more information about issues with the network, available at https://www.jcomm.info/index.php?option=com_oe&task=viewDocumentRecord&docID=24144.

I produced a line chart using global data. This is just the code to create an app using Dash library dividing up the years into three decades in a drop down menu.

The dataset was downloaded as txt and required: removing all the initial text, naming (and renaming to facilitate usage) the columns, cleaning, and removing unnecessary columns.

I have been using the "gmsl_variation_with_gia" column as the y-axis data for the global mean sea level rising chart. This column represents the sea height variation (in millimeters) with the Global Isostatic Adjustment (GIA) applied.

I had to translate the "year" column into the x-axis by setting it as the x-axis values for the plot. The "year" column contains fractional years (e.g., 1993.011526), which represent the time points for the sea level measurements. To make the x-axis more interpretable, you have converted these fractional years into datetime objects using a custom function "_frac_year_to_dt."

One might be surprised that the data ranges from -60 to 75. The reason is show more clearly to rising levels by expanding the data range. The fluctuations up and down each day represents the low and high tide occurring every lunar day, or 24 hours and 50 minutes.

In the context of global mean sea level variations, "Global Isostatic Adjustment (GIA)" accounts for the land movement caused by the loading and unloading of ice sheets and glaciers over geological timescales. It is essential to consider GIA when studying long-term sea level changes because the land movement affects the observed sea level measurements at different locations around the world. By applying GIA corrections to the sea level data, scientists can better understand the true global sea level variations and study the effects of climate change on sea levels accurately.

<b>Data credit</b>

GSFC. 2021. Global Mean Sea Level Trend from Integrated Multi-Mission Ocean Altimeters TOPEX/Poseidon, Jason-1, OSTM/Jason-2, and Jason-3 Version 5.1. Ver. 5.1
"""

# download libraries and set up fonts

from datetime import datetime, timedelta
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FixedLocator, FixedFormatter
import plotly.graph_objects as go

SMALL_SIZE = 14
MEDIUM_SIZE = 16
BIGGER_SIZE = 18
plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=BIGGER_SIZE)    # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.style.use('fast')

"""**Importing all the libraries needed from the Dash library**"""

pip install dash pandas

import dash
from dash import Dash, html, dash_table, dcc # importing all libraries needed
from dash.dependencies import Input, Output

"""# Import the dataset Global Mean Sea Level Data 1993-2023 already cleaned in Google sheets."""

df = pd.read_csv("Global Mean Sea Level Data 1993-2023 Cleaned and simplifyed.csv")

"""A function to convert the fractional years to timestamps:"""

def _frac_year_to_dt(x):
    year = int(x)
    base = datetime(year, 1, 1)
    remainder = x - year
    result = base + timedelta(seconds=(base.replace(year=base.year + 1) - base).total_seconds() * remainder)
    return result

(
    _frac_year_to_dt(df.year.min()).strftime("%Y-%m-%d %H:%M:%S"),
    _frac_year_to_dt(df.year.max()).strftime("%Y-%m-%d %H:%M:%S")
)

"""Apply the new function _frac_year_to_dt to the year column of the data frame, which should return realistic dates (between 1993 and 2023)."""

dates = df['year'].apply(_frac_year_to_dt)

"""Rename the series to time so it doesn't conflict with the existing year column:"""

dates.name = "time"

"""This next step is key for convenient data transformations and plotting.

Now set the datetimes as the new index for the data frame using the pandas.DataFrame.set_index method, which replaces the existing integer indices:
"""

df = df.set_index(dates)

# Get the upper and lower bounds of the error region
error_upper = df.gmsl_variation_with_gia + df.gmsl_variation_with_gia_std
error_lower = df.gmsl_variation_with_gia - df.gmsl_variation_with_gia_std

# Create the line plot for GMSL variation with GIA
fig = go.Figure()
fig.add_trace(go.Scatter(x=df.index, y=df.gmsl_variation_with_gia, name="GMSL Variation with GIA", mode="lines"))

# Customize the layout
fig.update_layout(
    title=dict(
        text="Global Sea Level variations 1993-2023 in 3 decades",
        x=0.5,  # Center the title horizontally
        y=0.95,  # Set the y-coordinate to adjust the title vertical position
        xanchor='center',  # Anchor point for the x-coordinate (center)
        yanchor='top',  # Anchor point for the y-coordinate (top)
        font=dict(size=24)  # Set the font size of the title
    ),
    xaxis_title="Year",
    yaxis_title="Sea Height Variation (mm)",
    xaxis=dict(range=[df.index[0], df.index[-1]]),
    yaxis=dict(range=[-60, 75]),
    legend=dict(x=1, y=0.1),
    margin=dict(l=100, r=100, t=100, b=100),
    hovermode='x'
)

# Create the Dash app
app = dash.Dash(__name__)

# Define the app layout
app.layout = html.Div([
    dcc.Dropdown(
        id='decade-dropdown',
        options=[
            {'label': '1993-2003', 'value': '1993-2003'},
            {'label': '2003-2013', 'value': '2003-2013'},
            {'label': '2013-2023', 'value': '2013-2023'}
        ],
        value='1993-2003',
    ),
    dcc.Graph(id='sea-level-variation', figure=fig)
])

# Define the callback function
@app.callback(
    Output('sea-level-variation', 'figure'),
    [Input('decade-dropdown', 'value')]
)
def update_sea_level_figure(selected_decade):
    # Extract the data for the selected decade from the DataFrame
    selected_data = df[(df['year'] >= int(selected_decade[:4])) & (df['year'] <= int(selected_decade[-4:]))]

    # Update the x and y data of the figure
    fig.update_traces(x=selected_data.index, y=selected_data['gmsl_variation_with_gia'])

    # Update the x-axis range
    fig.update_xaxes(range=[selected_data.index.min(), selected_data.index.max()])

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)